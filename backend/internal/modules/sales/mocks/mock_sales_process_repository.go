// Code generated by MockGen. DO NOT EDIT.
// Source: internal/modules/sales/repository/sales_process_repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	models "ERP-ONSMART/backend/internal/modules/sales/models"
	pagination "ERP-ONSMART/backend/internal/utils/pagination"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSalesProcessRepository is a mock of SalesProcessRepository interface.
type MockSalesProcessRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSalesProcessRepositoryMockRecorder
}

// MockSalesProcessRepositoryMockRecorder is the mock recorder for MockSalesProcessRepository.
type MockSalesProcessRepositoryMockRecorder struct {
	mock *MockSalesProcessRepository
}

// NewMockSalesProcessRepository creates a new mock instance.
func NewMockSalesProcessRepository(ctrl *gomock.Controller) *MockSalesProcessRepository {
	mock := &MockSalesProcessRepository{ctrl: ctrl}
	mock.recorder = &MockSalesProcessRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSalesProcessRepository) EXPECT() *MockSalesProcessRepositoryMockRecorder {
	return m.recorder
}

// CreateSalesProcess mocks base method.
func (m *MockSalesProcessRepository) CreateSalesProcess(process *models.SalesProcess) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSalesProcess", process)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSalesProcess indicates an expected call of CreateSalesProcess.
func (mr *MockSalesProcessRepositoryMockRecorder) CreateSalesProcess(process interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSalesProcess", reflect.TypeOf((*MockSalesProcessRepository)(nil).CreateSalesProcess), process)
}

// DeleteSalesProcess mocks base method.
func (m *MockSalesProcessRepository) DeleteSalesProcess(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSalesProcess", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSalesProcess indicates an expected call of DeleteSalesProcess.
func (mr *MockSalesProcessRepositoryMockRecorder) DeleteSalesProcess(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSalesProcess", reflect.TypeOf((*MockSalesProcessRepository)(nil).DeleteSalesProcess), id)
}

// GetAllSalesProcesses mocks base method.
func (m *MockSalesProcessRepository) GetAllSalesProcesses(params *pagination.PaginationParams) (*pagination.PaginatedResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSalesProcesses", params)
	ret0, _ := ret[0].(*pagination.PaginatedResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllSalesProcesses indicates an expected call of GetAllSalesProcesses.
func (mr *MockSalesProcessRepositoryMockRecorder) GetAllSalesProcesses(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSalesProcesses", reflect.TypeOf((*MockSalesProcessRepository)(nil).GetAllSalesProcesses), params)
}

// GetSalesProcessByContact mocks base method.
func (m *MockSalesProcessRepository) GetSalesProcessByContact(contactID int, params *pagination.PaginationParams) (*pagination.PaginatedResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSalesProcessByContact", contactID, params)
	ret0, _ := ret[0].(*pagination.PaginatedResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSalesProcessByContact indicates an expected call of GetSalesProcessByContact.
func (mr *MockSalesProcessRepositoryMockRecorder) GetSalesProcessByContact(contactID, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSalesProcessByContact", reflect.TypeOf((*MockSalesProcessRepository)(nil).GetSalesProcessByContact), contactID, params)
}

// GetSalesProcessByID mocks base method.
func (m *MockSalesProcessRepository) GetSalesProcessByID(id int) (*models.SalesProcess, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSalesProcessByID", id)
	ret0, _ := ret[0].(*models.SalesProcess)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSalesProcessByID indicates an expected call of GetSalesProcessByID.
func (mr *MockSalesProcessRepositoryMockRecorder) GetSalesProcessByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSalesProcessByID", reflect.TypeOf((*MockSalesProcessRepository)(nil).GetSalesProcessByID), id)
}

// GetSalesProcessByStatus mocks base method.
func (m *MockSalesProcessRepository) GetSalesProcessByStatus(status string, params *pagination.PaginationParams) (*pagination.PaginatedResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSalesProcessByStatus", status, params)
	ret0, _ := ret[0].(*pagination.PaginatedResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSalesProcessByStatus indicates an expected call of GetSalesProcessByStatus.
func (mr *MockSalesProcessRepositoryMockRecorder) GetSalesProcessByStatus(status, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSalesProcessByStatus", reflect.TypeOf((*MockSalesProcessRepository)(nil).GetSalesProcessByStatus), status, params)
}

// LinkDeliveryToProcess mocks base method.
func (m *MockSalesProcessRepository) LinkDeliveryToProcess(processID, deliveryID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LinkDeliveryToProcess", processID, deliveryID)
	ret0, _ := ret[0].(error)
	return ret0
}

// LinkDeliveryToProcess indicates an expected call of LinkDeliveryToProcess.
func (mr *MockSalesProcessRepositoryMockRecorder) LinkDeliveryToProcess(processID, deliveryID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LinkDeliveryToProcess", reflect.TypeOf((*MockSalesProcessRepository)(nil).LinkDeliveryToProcess), processID, deliveryID)
}

// LinkInvoiceToProcess mocks base method.
func (m *MockSalesProcessRepository) LinkInvoiceToProcess(processID, invoiceID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LinkInvoiceToProcess", processID, invoiceID)
	ret0, _ := ret[0].(error)
	return ret0
}

// LinkInvoiceToProcess indicates an expected call of LinkInvoiceToProcess.
func (mr *MockSalesProcessRepositoryMockRecorder) LinkInvoiceToProcess(processID, invoiceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LinkInvoiceToProcess", reflect.TypeOf((*MockSalesProcessRepository)(nil).LinkInvoiceToProcess), processID, invoiceID)
}

// LinkPurchaseOrderToProcess mocks base method.
func (m *MockSalesProcessRepository) LinkPurchaseOrderToProcess(processID, purchaseOrderID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LinkPurchaseOrderToProcess", processID, purchaseOrderID)
	ret0, _ := ret[0].(error)
	return ret0
}

// LinkPurchaseOrderToProcess indicates an expected call of LinkPurchaseOrderToProcess.
func (mr *MockSalesProcessRepositoryMockRecorder) LinkPurchaseOrderToProcess(processID, purchaseOrderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LinkPurchaseOrderToProcess", reflect.TypeOf((*MockSalesProcessRepository)(nil).LinkPurchaseOrderToProcess), processID, purchaseOrderID)
}

// LinkQuotationToProcess mocks base method.
func (m *MockSalesProcessRepository) LinkQuotationToProcess(processID, quotationID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LinkQuotationToProcess", processID, quotationID)
	ret0, _ := ret[0].(error)
	return ret0
}

// LinkQuotationToProcess indicates an expected call of LinkQuotationToProcess.
func (mr *MockSalesProcessRepositoryMockRecorder) LinkQuotationToProcess(processID, quotationID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LinkQuotationToProcess", reflect.TypeOf((*MockSalesProcessRepository)(nil).LinkQuotationToProcess), processID, quotationID)
}

// LinkSalesOrderToProcess mocks base method.
func (m *MockSalesProcessRepository) LinkSalesOrderToProcess(processID, salesOrderID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LinkSalesOrderToProcess", processID, salesOrderID)
	ret0, _ := ret[0].(error)
	return ret0
}

// LinkSalesOrderToProcess indicates an expected call of LinkSalesOrderToProcess.
func (mr *MockSalesProcessRepositoryMockRecorder) LinkSalesOrderToProcess(processID, salesOrderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LinkSalesOrderToProcess", reflect.TypeOf((*MockSalesProcessRepository)(nil).LinkSalesOrderToProcess), processID, salesOrderID)
}

// UpdateSalesProcess mocks base method.
func (m *MockSalesProcessRepository) UpdateSalesProcess(id int, process *models.SalesProcess) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSalesProcess", id, process)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSalesProcess indicates an expected call of UpdateSalesProcess.
func (mr *MockSalesProcessRepositoryMockRecorder) UpdateSalesProcess(id, process interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSalesProcess", reflect.TypeOf((*MockSalesProcessRepository)(nil).UpdateSalesProcess), id, process)
}
