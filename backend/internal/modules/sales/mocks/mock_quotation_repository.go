// Code generated by MockGen. DO NOT EDIT.
// Source: internal/modules/sales/repository/quotation_repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	models "ERP-ONSMART/backend/internal/modules/sales/models"
	pagination "ERP-ONSMART/backend/internal/utils/pagination"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockQuotationRepository is a mock of QuotationRepository interface.
type MockQuotationRepository struct {
	ctrl     *gomock.Controller
	recorder *MockQuotationRepositoryMockRecorder
}

// MockQuotationRepositoryMockRecorder is the mock recorder for MockQuotationRepository.
type MockQuotationRepositoryMockRecorder struct {
	mock *MockQuotationRepository
}

// NewMockQuotationRepository creates a new mock instance.
func NewMockQuotationRepository(ctrl *gomock.Controller) *MockQuotationRepository {
	mock := &MockQuotationRepository{ctrl: ctrl}
	mock.recorder = &MockQuotationRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuotationRepository) EXPECT() *MockQuotationRepositoryMockRecorder {
	return m.recorder
}

// CreateQuotation mocks base method.
func (m *MockQuotationRepository) CreateQuotation(quotation *models.Quotation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateQuotation", quotation)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateQuotation indicates an expected call of CreateQuotation.
func (mr *MockQuotationRepositoryMockRecorder) CreateQuotation(quotation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateQuotation", reflect.TypeOf((*MockQuotationRepository)(nil).CreateQuotation), quotation)
}

// DeleteQuotation mocks base method.
func (m *MockQuotationRepository) DeleteQuotation(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteQuotation", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteQuotation indicates an expected call of DeleteQuotation.
func (mr *MockQuotationRepositoryMockRecorder) DeleteQuotation(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteQuotation", reflect.TypeOf((*MockQuotationRepository)(nil).DeleteQuotation), id)
}

// GetAllQuotations mocks base method.
func (m *MockQuotationRepository) GetAllQuotations(params *pagination.PaginationParams) (*pagination.PaginatedResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllQuotations", params)
	ret0, _ := ret[0].(*pagination.PaginatedResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllQuotations indicates an expected call of GetAllQuotations.
func (mr *MockQuotationRepositoryMockRecorder) GetAllQuotations(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllQuotations", reflect.TypeOf((*MockQuotationRepository)(nil).GetAllQuotations), params)
}

// GetExpiredQuotations mocks base method.
func (m *MockQuotationRepository) GetExpiredQuotations(params *pagination.PaginationParams) (*pagination.PaginatedResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExpiredQuotations", params)
	ret0, _ := ret[0].(*pagination.PaginatedResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExpiredQuotations indicates an expected call of GetExpiredQuotations.
func (mr *MockQuotationRepositoryMockRecorder) GetExpiredQuotations(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExpiredQuotations", reflect.TypeOf((*MockQuotationRepository)(nil).GetExpiredQuotations), params)
}

// GetQuotationByID mocks base method.
func (m *MockQuotationRepository) GetQuotationByID(id int) (*models.Quotation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuotationByID", id)
	ret0, _ := ret[0].(*models.Quotation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuotationByID indicates an expected call of GetQuotationByID.
func (mr *MockQuotationRepositoryMockRecorder) GetQuotationByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuotationByID", reflect.TypeOf((*MockQuotationRepository)(nil).GetQuotationByID), id)
}

// GetQuotationsByContact mocks base method.
func (m *MockQuotationRepository) GetQuotationsByContact(contactID int, params *pagination.PaginationParams) (*pagination.PaginatedResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuotationsByContact", contactID, params)
	ret0, _ := ret[0].(*pagination.PaginatedResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuotationsByContact indicates an expected call of GetQuotationsByContact.
func (mr *MockQuotationRepositoryMockRecorder) GetQuotationsByContact(contactID, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuotationsByContact", reflect.TypeOf((*MockQuotationRepository)(nil).GetQuotationsByContact), contactID, params)
}

// GetQuotationsByStatus mocks base method.
func (m *MockQuotationRepository) GetQuotationsByStatus(status string, params *pagination.PaginationParams) (*pagination.PaginatedResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuotationsByStatus", status, params)
	ret0, _ := ret[0].(*pagination.PaginatedResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuotationsByStatus indicates an expected call of GetQuotationsByStatus.
func (mr *MockQuotationRepositoryMockRecorder) GetQuotationsByStatus(status, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuotationsByStatus", reflect.TypeOf((*MockQuotationRepository)(nil).GetQuotationsByStatus), status, params)
}

// UpdateQuotation mocks base method.
func (m *MockQuotationRepository) UpdateQuotation(id int, quotation *models.Quotation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateQuotation", id, quotation)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateQuotation indicates an expected call of UpdateQuotation.
func (mr *MockQuotationRepositoryMockRecorder) UpdateQuotation(id, quotation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateQuotation", reflect.TypeOf((*MockQuotationRepository)(nil).UpdateQuotation), id, quotation)
}
