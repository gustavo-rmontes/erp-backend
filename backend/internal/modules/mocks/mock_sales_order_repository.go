// Code generated by MockGen. DO NOT EDIT.
// Source: backend/internal/modules/sales/repository/sales_order_repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	models "ERP-ONSMART/backend/internal/modules/sales/models"
	pagination "ERP-ONSMART/backend/internal/utils/pagination"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockSalesOrderRepository is a mock of SalesOrderRepository interface.
type MockSalesOrderRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSalesOrderRepositoryMockRecorder
}

// MockSalesOrderRepositoryMockRecorder is the mock recorder for MockSalesOrderRepository.
type MockSalesOrderRepositoryMockRecorder struct {
	mock *MockSalesOrderRepository
}

// NewMockSalesOrderRepository creates a new mock instance.
func NewMockSalesOrderRepository(ctrl *gomock.Controller) *MockSalesOrderRepository {
	mock := &MockSalesOrderRepository{ctrl: ctrl}
	mock.recorder = &MockSalesOrderRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSalesOrderRepository) EXPECT() *MockSalesOrderRepositoryMockRecorder {
	return m.recorder
}

// CreateSalesOrder mocks base method.
func (m *MockSalesOrderRepository) CreateSalesOrder(order *models.SalesOrder) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSalesOrder", order)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSalesOrder indicates an expected call of CreateSalesOrder.
func (mr *MockSalesOrderRepositoryMockRecorder) CreateSalesOrder(order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSalesOrder", reflect.TypeOf((*MockSalesOrderRepository)(nil).CreateSalesOrder), order)
}

// DeleteSalesOrder mocks base method.
func (m *MockSalesOrderRepository) DeleteSalesOrder(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSalesOrder", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSalesOrder indicates an expected call of DeleteSalesOrder.
func (mr *MockSalesOrderRepositoryMockRecorder) DeleteSalesOrder(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSalesOrder", reflect.TypeOf((*MockSalesOrderRepository)(nil).DeleteSalesOrder), id)
}

// GetAllSalesOrders mocks base method.
func (m *MockSalesOrderRepository) GetAllSalesOrders(params *pagination.PaginationParams) (*pagination.PaginatedResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSalesOrders", params)
	ret0, _ := ret[0].(*pagination.PaginatedResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllSalesOrders indicates an expected call of GetAllSalesOrders.
func (mr *MockSalesOrderRepositoryMockRecorder) GetAllSalesOrders(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSalesOrders", reflect.TypeOf((*MockSalesOrderRepository)(nil).GetAllSalesOrders), params)
}

// GetDB mocks base method.
func (m *MockSalesOrderRepository) GetDB() *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDB")
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// GetDB indicates an expected call of GetDB.
func (mr *MockSalesOrderRepositoryMockRecorder) GetDB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDB", reflect.TypeOf((*MockSalesOrderRepository)(nil).GetDB))
}

// GetSalesOrderByID mocks base method.
func (m *MockSalesOrderRepository) GetSalesOrderByID(id int) (*models.SalesOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSalesOrderByID", id)
	ret0, _ := ret[0].(*models.SalesOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSalesOrderByID indicates an expected call of GetSalesOrderByID.
func (mr *MockSalesOrderRepositoryMockRecorder) GetSalesOrderByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSalesOrderByID", reflect.TypeOf((*MockSalesOrderRepository)(nil).GetSalesOrderByID), id)
}

// GetSalesOrdersByContact mocks base method.
func (m *MockSalesOrderRepository) GetSalesOrdersByContact(contactID int, params *pagination.PaginationParams) (*pagination.PaginatedResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSalesOrdersByContact", contactID, params)
	ret0, _ := ret[0].(*pagination.PaginatedResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSalesOrdersByContact indicates an expected call of GetSalesOrdersByContact.
func (mr *MockSalesOrderRepositoryMockRecorder) GetSalesOrdersByContact(contactID, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSalesOrdersByContact", reflect.TypeOf((*MockSalesOrderRepository)(nil).GetSalesOrdersByContact), contactID, params)
}

// GetSalesOrdersByQuotation mocks base method.
func (m *MockSalesOrderRepository) GetSalesOrdersByQuotation(quotationID int) (*models.SalesOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSalesOrdersByQuotation", quotationID)
	ret0, _ := ret[0].(*models.SalesOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSalesOrdersByQuotation indicates an expected call of GetSalesOrdersByQuotation.
func (mr *MockSalesOrderRepositoryMockRecorder) GetSalesOrdersByQuotation(quotationID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSalesOrdersByQuotation", reflect.TypeOf((*MockSalesOrderRepository)(nil).GetSalesOrdersByQuotation), quotationID)
}

// GetSalesOrdersByStatus mocks base method.
func (m *MockSalesOrderRepository) GetSalesOrdersByStatus(status string, params *pagination.PaginationParams) (*pagination.PaginatedResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSalesOrdersByStatus", status, params)
	ret0, _ := ret[0].(*pagination.PaginatedResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSalesOrdersByStatus indicates an expected call of GetSalesOrdersByStatus.
func (mr *MockSalesOrderRepositoryMockRecorder) GetSalesOrdersByStatus(status, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSalesOrdersByStatus", reflect.TypeOf((*MockSalesOrderRepository)(nil).GetSalesOrdersByStatus), status, params)
}

// GetSalesOrdersWithDeliveries mocks base method.
func (m *MockSalesOrderRepository) GetSalesOrdersWithDeliveries(hasDelivery bool, params *pagination.PaginationParams) (*pagination.PaginatedResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSalesOrdersWithDeliveries", hasDelivery, params)
	ret0, _ := ret[0].(*pagination.PaginatedResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSalesOrdersWithDeliveries indicates an expected call of GetSalesOrdersWithDeliveries.
func (mr *MockSalesOrderRepositoryMockRecorder) GetSalesOrdersWithDeliveries(hasDelivery, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSalesOrdersWithDeliveries", reflect.TypeOf((*MockSalesOrderRepository)(nil).GetSalesOrdersWithDeliveries), hasDelivery, params)
}

// GetSalesOrdersWithInvoices mocks base method.
func (m *MockSalesOrderRepository) GetSalesOrdersWithInvoices(hasInvoice bool, params *pagination.PaginationParams) (*pagination.PaginatedResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSalesOrdersWithInvoices", hasInvoice, params)
	ret0, _ := ret[0].(*pagination.PaginatedResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSalesOrdersWithInvoices indicates an expected call of GetSalesOrdersWithInvoices.
func (mr *MockSalesOrderRepositoryMockRecorder) GetSalesOrdersWithInvoices(hasInvoice, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSalesOrdersWithInvoices", reflect.TypeOf((*MockSalesOrderRepository)(nil).GetSalesOrdersWithInvoices), hasInvoice, params)
}

// SearchSalesOrders mocks base method.
func (m *MockSalesOrderRepository) SearchSalesOrders(query string, params *pagination.PaginationParams) (*pagination.PaginatedResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchSalesOrders", query, params)
	ret0, _ := ret[0].(*pagination.PaginatedResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchSalesOrders indicates an expected call of SearchSalesOrders.
func (mr *MockSalesOrderRepositoryMockRecorder) SearchSalesOrders(query, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchSalesOrders", reflect.TypeOf((*MockSalesOrderRepository)(nil).SearchSalesOrders), query, params)
}

// UpdateSalesOrder mocks base method.
func (m *MockSalesOrderRepository) UpdateSalesOrder(id int, order *models.SalesOrder) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSalesOrder", id, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSalesOrder indicates an expected call of UpdateSalesOrder.
func (mr *MockSalesOrderRepositoryMockRecorder) UpdateSalesOrder(id, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSalesOrder", reflect.TypeOf((*MockSalesOrderRepository)(nil).UpdateSalesOrder), id, order)
}
